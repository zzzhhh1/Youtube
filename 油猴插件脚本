// ==UserScript==
// @name                修改YouTube首页布局
// @name:zh-CN          修改YouTube首页布局
// @name:zh-TW          修改YouTube首頁佈局
// @name:en             Modify YouTube Homepage Layout
// @name:ja             YouTubeホームレイアウトカスタマイズ
// @description         修改YouTube首页每行推荐视频数量
// @description:zh-CN   修改YouTube首页每行推荐视频数量
// @description:zh-TW   修改YouTube首頁每行推薦視頻數量
// @description:en      Change the number of recommended videos per row on the YouTube homepage
// @description:ja      YouTubeのホームページで1行に表示されるおすすめ動画の数を変更します
// @version             1.5
// @author              爆菊大师
// @match               https://www.youtube.com/
// @icon                https://www.youtube.com/favicon.ico
// @grant               GM_registerMenuCommand
// @run-at              document-idle
// @license             MIT
// @namespace https://greasyfork.org/users/929164
// @downloadURL https://update.greasyfork.org/scripts/533051/%E4%BF%AE%E6%94%B9YouTube%E9%A6%96%E9%A1%B5%E5%B8%83%E5%B1%80.user.js
// @updateURL https://update.greasyfork.org/scripts/533051/%E4%BF%AE%E6%94%B9YouTube%E9%A6%96%E9%A1%B5%E5%B8%83%E5%B1%80.meta.js
// ==/UserScript==

(() => {
    'use strict';
    const CONFIG = {
        columns: 'ytd-items-per-row',
        shorts: 'ytd-shorts-blocked',
        portraitColumns: 'ytd-portrait-columns'
    };
    const state = {
        columns: Math.min(10, Math.max(1,
            parseInt(localStorage.getItem(CONFIG.columns)) || 5)),
        shorts: localStorage.getItem(CONFIG.shorts) === 'true',
        portraitColumns: parseInt(localStorage.getItem(CONFIG.portraitColumns)) || null,
        styleApplied: false
    };

    // 创建样式元素，确保只创建一次
    let layoutStyle, shortsStyle;
    const createStyles = () => {
        if (!layoutStyle) {
            layoutStyle = document.head.appendChild(document.createElement('style'));
            layoutStyle.id = 'yt-layout-customizer';
        }
        if (!shortsStyle) {
            shortsStyle = document.head.appendChild(document.createElement('style'));
            shortsStyle.id = 'yt-shorts-customizer';
        }
    };

    const handleResize = () => {
        if (state.portraitColumns !== null) {
            const { innerWidth: width, innerHeight: height } = window;
            const originalColumns = Math.min(10, Math.max(1,
                parseInt(localStorage.getItem(CONFIG.columns)) || 5));
            state.columns = width > height ? originalColumns : state.portraitColumns;
            updateStyle();
        }
    };

    const updateStyle = () => {
        createStyles();
        layoutStyle.textContent = `
            .style-scope.ytd-two-column-browse-results-renderer {
                --ytd-rich-grid-items-per-row: ${state.columns} !important;
                --ytd-rich-grid-gutter-margin: 0px !important;
            }
        `;
        shortsStyle.textContent = state.shorts ? `
            ytd-rich-section-renderer,
            ytd-reel-shelf-renderer {
                display: none !important;
            }
        ` : '';
        state.styleApplied = true;
    };

    // 注册菜单命令
    const registerMenuCommands = () => {
        GM_registerMenuCommand('🖥️ 设置每行显示数量', () => {
            const input = prompt('请输入每行显示的视频数量（1-10）:', state.columns);
            if (input === null) return;

            const value = Math.min(10, Math.max(1, parseInt(input) || state.columns));
            localStorage.setItem(CONFIG.columns, value);
            state.columns = value;
            handleResize();
            updateStyle();
            alert(`当前设置：每行显示 ${value} 个视频`);
        });

        GM_registerMenuCommand('📱 竖屏显示数量', () => {
            const input = prompt(`纵向模式列数（1-10，当前：${state.portraitColumns || "未设置"}）:`, state.portraitColumns || 6);
            if (input === null) return;
            const value = Math.min(10, Math.max(1, parseInt(input) || 6));
            localStorage.setItem(CONFIG.portraitColumns, value);
            state.portraitColumns = value;
            handleResize();
            alert(`竖屏当前设置：每行显示 ${value} 个视频`);
        });

        if (state.portraitColumns !== null) {
            GM_registerMenuCommand('清除竖屏设置', () => {
                if (!confirm('确定要清除竖屏设置吗？')) return;
                localStorage.removeItem(CONFIG.portraitColumns);
                state.portraitColumns = null;
                state.columns = Math.min(10, Math.max(1,
                    parseInt(localStorage.getItem(CONFIG.columns)) || 5));
                updateStyle();
                alert('已清除竖屏设置');
            });
        }

        GM_registerMenuCommand(state.shorts ? '显示Shorts' : '隐藏Shorts', () => {
            state.shorts = !state.shorts;
            localStorage.setItem(CONFIG.shorts, state.shorts);
            updateStyle();
            window.location.reload();
        });
    };

    // 确保样式应用，但等待内容加载
    const ensureStylesApplied = () => {
        // 等待缩略图加载的关键元素
        const waitForThumbnails = () => {
            // 检查是否有视频缩略图已经加载
            const thumbnails = document.querySelectorAll('ytd-rich-grid-media, ytd-rich-item-renderer');
            const thumbnailsLoaded = document.querySelectorAll('ytd-thumbnail img[src]').length > 0;

            if (thumbnails.length > 0 && thumbnailsLoaded) {
                // 缩略图元素已存在且至少有一张图片已加载，应用样式
                updateStyle();
                return true;
            }
            return false;
        };

        // 如果立即检查能找到元素，就直接应用样式
        if (waitForThumbnails()) {
            return;
        }

        // 使用MutationObserver监听DOM变化，等待缩略图加载
        const observer = new MutationObserver((mutations) => {
            if (waitForThumbnails()) {
                // 一旦找到缩略图并应用了样式，就停止观察
                observer.disconnect();
            }
        });

        // 开始观察document的子树变化
        observer.observe(document.documentElement, {
            childList: true,
            subtree: true,
            attributes: true,
            attributeFilter: ['src']
        });

        // 设置一个备用的定时检查机制
        let checkCount = 0;
        const maxChecks = 20; // 最多检查20次，约10秒

        const checkInterval = setInterval(() => {
            checkCount++;
            if (waitForThumbnails() || checkCount >= maxChecks) {
                clearInterval(checkInterval);
                observer.disconnect();

                // 如果达到最大检查次数仍未找到缩略图，尝试强制应用样式
                if (checkCount >= maxChecks && !state.styleApplied) {
                    console.log('YouTube布局优化: 强制应用样式');
                    updateStyle();
                }
            }
        }, 500);
    };

    // 初始化
    const init = () => {
        // 修复状态如果无效
        if (typeof state.columns !== 'number' || isNaN(state.columns)) {
            state.columns = 5;
        }

        // 注册事件监听
        window.addEventListener('resize', handleResize);

        // 添加菜单命令
        registerMenuCommands();

        // 等待页面加载完成后应用样式
        if (document.readyState === 'complete') {
            setTimeout(ensureStylesApplied, 1000); // 延迟1秒让YouTube完成初始渲染
        } else {
            window.addEventListener('load', () => {
                setTimeout(ensureStylesApplied, 1000);
            });
        }

        // 初始调用一次resize处理
        handleResize();
    };

    // 启动脚本
    init();
})();
